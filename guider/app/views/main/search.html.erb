<div class="search-page">
<div class="search-controls" align="left">
<%= form_tag({'controller' => 'main', 'action' => 'search'}, :remote => true) do |f| %>
    <table width="75%"><tr><td width="7%" align="left">
        Price:
    </td><td width="38%" align="left">
    <div class="span4">
        <% price_diapasone = @min_price.to_s + ';' + @max_price.to_s %>
        <%= text_field_tag '', price_diapasone, :id => "Slider2", :type => "slider", :name => "price" %>
    </div>
    </td><td width="8%" align="right">

    Tags: 
    </td><td width="38%">
    <%= collection_select :city_tag, 'tags', CityTag.all, :value, :value, {}, {multiple: true, class: "chosen-select"} %>
    </td><td>
    <%= hidden_field_tag "city_id_2", '', :value => params[:city_id] %>
    <%= hidden_field_tag "arrive", '', :value => params[:arrive] %>
    <%= hidden_field_tag "depart", '', :value => params[:depart] %>
    </td><td>
    </td><td width="3%">
        <span class="ui-icon ui-icon-carat-1-s" id="vChange"></span>
    </td><td align="left">
    <%= submit_tag "Search", :id => "search-button" %>
    </td><td>
    </tr></table>
    <div id="extra-parameters-hidden" align="left">
        <table width="75%"><tr><td width="7%" align="left">
            Languages:
        </td><td width="30%" align="left">
            <%= collection_select :lang_tag, 'tags', Language.all, :value, :value, {}, {multiple: true, class: "chosen-select"} %>
        </td><td width="10%" align="right">
            Sort by:
        </td><td align="left">
            <%= select_tag 'order', options_for_select(["best match", "price (low to high)", "price (high to low)"]) %>
        </td></tr></table>
    </div>
<% end %>
</div>

<br>
<table width="100%"><tr><td width="50%" valign="top">
    <div id="search_results">
    <% if @search_results.empty? %>
        <div>
            Sorry, nothing found :( <br>Please change search parameters, and we will find you something suitable.<br>Good luck!
        </div>
    <% else %>

        <div class="table-wrapper">
            <% @search_results.each do |res| %>
                <%= render :partial => 'search_result', :locals => {:res => res, :edit_n_delete => false, :book => true} %>
            <% end %>
        </div>
    <% end %>
    </div>
</td><td width="50%" valign="top" style="position: relative;" id="right_column">
    <div id="sticky" class="search-result-extra">
    </div>
</td></tr></table>

<%= javascript_tag do %>
    $("#Slider2").slider({ from: <%=j @min_price.to_s %>, to: <%=j @max_price.to_s %>, step: 100, dimension: '&nbsp;RUB' });

    var flag = false;
    $("#extra-parameters-hidden").css({"visibility" : "hidden", "display":"none"});
    var v = document.getElementById("vChange");
    v.onclick = function(){ changeState() };
    $("#sticky").css({"visibility": "hidden"});

    function changeState() {
        if (flag) {
            $("#extra-parameters-hidden").css({"visibility" : "hidden", "display":"none"});
            v.className = "ui-icon ui-icon-carat-1-s";
        } else {
            $("#extra-parameters-hidden").css({"visibility":"visible", "display":"block"});
            v.className = "ui-icon ui-icon-carat-1-n";
        }
        flag = !flag;
    }

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
                var context = this, args = arguments;
                var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
        };
    };

    var sticky_relocate = debounce(function() {
        var sticky_top = $(window).scrollTop();
        var anchor_top = $('#search_results').offset().top;

        var anchor_bottom = anchor_top + $('#search_results').height() - 34;
        var sticky_bottom = sticky_top + $(window).height() * 0.95 - 20;

        var promo = $('#become_a_guide_promo');
        if (promo.offset()) {
            if (promo.offset().top - 40 > anchor_bottom) {
                anchor_bottom = promo.offset().top - 40;
            }
        }

        var w = $('#right_column').width() - 20;

        if (anchor_top < sticky_top) {
            if (sticky_bottom > anchor_bottom) {
                $('#sticky').removeClass('stick');
                $('#sticky').addClass('stick_bottom');
                var h = $(window).height() * 0.95;
                $("#sticky").css({top: anchor_bottom - h - 87, height: h, width: w});
            } else {
                $('#sticky').removeClass('stick_bottom');
                $('#sticky').addClass('stick');
                var h = $(window).height() * 0.95;
                $("#sticky").css({top: 10, height: h, width: w});
            }
        } else {
            $('#sticky').removeClass('stick_bottom');
            $('#sticky').removeClass('stick');
            var h = sticky_top + $(window).height() - anchor_top - 10;
            if (anchor_bottom - anchor_top - 20 < h) {
                if (anchor_bottom - anchor_top - 20 > 600) {
                    h = anchor_bottom - anchor_top - 20;
                }
            }
            $("#sticky").css({height: h, width: w});
        }
    }, 1);

    $(window).on("load", sticky_relocate);
    $(window).on("scroll", sticky_relocate);

    $(".search-result").click(function(event) {
        event = event || window.event;
        var t = event.target || event.srcElement;

        $('.search-result').each(function() {
            $(this).css({"background" : "#eeeeee"});
        });

        res_id = -1;
        var flag = false;
        for (var i = 0; i < 8; i++) {
            if ((t.id == "button_book") || (t.id == "user_avatar") || (t.id == "user_link")) {
                flag = true;
            }
            if (t.className == "search-result") {
                res_id = t.id;
                $('#' + res_id).css({"background" : "#cccccc"});
                if (flag) {
                    return;
                }
                break;
            }
            t = t.parentNode;
        }

        var tmp = -2;
        <% @search_results.each do |res| %>
            tmp = parseInt('<%=j res.id.to_s %>');
            if (tmp == res_id) {
                var str = "<%=j render(:partial => 'search_result_extra', :locals => {:res => res, :show_book => true}) %>";
                $("#sticky").html(str);
                $("#sticky").css({"visibility": "visible"});
                $('.bxslider').bxSlider({
                    slideWidth: 400,
                });
            }
        <% end %>
    });

<% end %>
</div>
